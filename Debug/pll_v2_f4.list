
pll_v2_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001384  08001384  00011384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013a0  080013a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080013a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000040  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000004c  2000004c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001599  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000049f  00000000  00000000  000215d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000088  00000000  00000000  00021a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000006e0  00000000  00000000  00021b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000b8b  00000000  00000000  000221e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00022d6b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000428  00000000  00000000  00022de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00023210  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001368 	.word	0x08001368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001368 	.word	0x08001368

080001c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da0b      	bge.n	8000228 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000210:	490d      	ldr	r1, [pc, #52]	; (8000248 <NVIC_SetPriority+0x4c>)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	3b04      	subs	r3, #4
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	b2d2      	uxtb	r2, r2
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000226:	e009      	b.n	800023c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <NVIC_SetPriority+0x50>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000e100 	.word	0xe000e100

08000250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000260:	d301      	bcc.n	8000266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000262:	2301      	movs	r3, #1
 8000264:	e00f      	b.n	8000286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <SysTick_Config+0x40>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3b01      	subs	r3, #1
 800026c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800026e:	210f      	movs	r1, #15
 8000270:	f04f 30ff 	mov.w	r0, #4294967295
 8000274:	f7ff ffc2 	bl	80001fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <SysTick_Config+0x40>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027e:	4b04      	ldr	r3, [pc, #16]	; (8000290 <SysTick_Config+0x40>)
 8000280:	2207      	movs	r2, #7
 8000282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000284:	2300      	movs	r3, #0
}
 8000286:	4618      	mov	r0, r3
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	e000e010 	.word	0xe000e010

08000294 <clockConfig>:
#define PLL_Q      4

void clockConfig(void);

void clockConfig(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	RCC->CR |= (uint32_t)RCC_CR_HSEON;
 8000298:	4a2a      	ldr	r2, [pc, #168]	; (8000344 <clockConfig+0xb0>)
 800029a:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <clockConfig+0xb0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002a2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY)){};
 80002a4:	bf00      	nop
 80002a6:	4b27      	ldr	r3, [pc, #156]	; (8000344 <clockConfig+0xb0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <clockConfig+0x12>

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002b2:	4a24      	ldr	r2, [pc, #144]	; (8000344 <clockConfig+0xb0>)
 80002b4:	4b23      	ldr	r3, [pc, #140]	; (8000344 <clockConfig+0xb0>)
 80002b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002be:	4a22      	ldr	r2, [pc, #136]	; (8000348 <clockConfig+0xb4>)
 80002c0:	4b21      	ldr	r3, [pc, #132]	; (8000348 <clockConfig+0xb4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c8:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <clockConfig+0xb0>)
 80002cc:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <clockConfig+0xb0>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <clockConfig+0xb0>)
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <clockConfig+0xb0>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002dc:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002de:	4a19      	ldr	r2, [pc, #100]	; (8000344 <clockConfig+0xb0>)
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <clockConfig+0xb0>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002e8:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <clockConfig+0xb0>)
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <clockConfig+0xb8>)
 80002ee:	605a      	str	r2, [r3, #4]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002f0:	4a14      	ldr	r2, [pc, #80]	; (8000344 <clockConfig+0xb0>)
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <clockConfig+0xb0>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fa:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0){}
 80002fc:	bf00      	nop
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <clockConfig+0xb0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <clockConfig+0x6a>

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <clockConfig+0xbc>)
 800030c:	f240 6205 	movw	r2, #1541	; 0x605
 8000310:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000312:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <clockConfig+0xb0>)
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <clockConfig+0xb0>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f023 0303 	bic.w	r3, r3, #3
 800031c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <clockConfig+0xb0>)
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <clockConfig+0xb0>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f043 0302 	orr.w	r3, r3, #2
 8000328:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL){};
 800032a:	bf00      	nop
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <clockConfig+0xb0>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f003 030c 	and.w	r3, r3, #12
 8000334:	2b08      	cmp	r3, #8
 8000336:	d1f9      	bne.n	800032c <clockConfig+0x98>
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40023800 	.word	0x40023800
 8000348:	40007000 	.word	0x40007000
 800034c:	04402a04 	.word	0x04402a04
 8000350:	40023c00 	.word	0x40023c00

08000354 <TIM2_Init>:


void TIM2_Init(void);

void TIM2_Init(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000358:	4a44      	ldr	r2, [pc, #272]	; (800046c <TIM2_Init+0x118>)
 800035a:	4b44      	ldr	r3, [pc, #272]	; (800046c <TIM2_Init+0x118>)
 800035c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000364:	4a41      	ldr	r2, [pc, #260]	; (800046c <TIM2_Init+0x118>)
 8000366:	4b41      	ldr	r3, [pc, #260]	; (800046c <TIM2_Init+0x118>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER15_1 | GPIO_MODER_MODER1_1;
 8000370:	4a3f      	ldr	r2, [pc, #252]	; (8000470 <TIM2_Init+0x11c>)
 8000372:	4b3f      	ldr	r3, [pc, #252]	; (8000470 <TIM2_Init+0x11c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6013      	str	r3, [r2, #0]
	//GPIOA->PUPDR |= GPIO_PUPDR_PUPD15_1;
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL1_0;
 8000380:	4a3b      	ldr	r2, [pc, #236]	; (8000470 <TIM2_Init+0x11c>)
 8000382:	4b3b      	ldr	r3, [pc, #236]	; (8000470 <TIM2_Init+0x11c>)
 8000384:	6a1b      	ldr	r3, [r3, #32]
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL15_0;
 800038c:	4a38      	ldr	r2, [pc, #224]	; (8000470 <TIM2_Init+0x11c>)
 800038e:	4b38      	ldr	r3, [pc, #224]	; (8000470 <TIM2_Init+0x11c>)
 8000390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000396:	6253      	str	r3, [r2, #36]	; 0x24


	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0; // Input Capture 1 Filter
 80003a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80003b6:	6193      	str	r3, [r2, #24]
	//TIM2->CCMR1 |= TIM_CCMR1_IC1PSC_0; // Input Capture 1 Prescaler
	TIM2->CCER |= TIM_CCER_CC1E; // Capture enabled
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c0:	6a1b      	ldr	r3, [r3, #32]
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6213      	str	r3, [r2, #32]
	TIM2->CCER &=~ TIM_CCER_CC1P; // rising edge CC1P = 0; CC1NP = 0
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	f023 0302 	bic.w	r3, r3, #2
 80003d6:	6213      	str	r3, [r2, #32]
	TIM2->CCER &=~ TIM_CCER_CC1NP;
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e0:	6a1b      	ldr	r3, [r3, #32]
 80003e2:	f023 0308 	bic.w	r3, r3, #8
 80003e6:	6213      	str	r3, [r2, #32]

	TIM2->CCMR1 |= TIM_CCMR1_CC2S_0;
 80003e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_IC2F_1 | TIM_CCMR1_IC2F_0; // Input Capture 2 Filter
 80003f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000406:	6193      	str	r3, [r2, #24]
	//TIM2->CCMR1 |= TIM_CCMR1_IC2PSC_0; // Input Capture 2 Prescaler
	TIM2->CCER |= TIM_CCER_CC2E; // Capture enabled
 8000408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	6a1b      	ldr	r3, [r3, #32]
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6213      	str	r3, [r2, #32]
	TIM2->CCER &=~ TIM_CCER_CC2P; // rising edge CC2P = 0; CC2NP = 0
 8000418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000420:	6a1b      	ldr	r3, [r3, #32]
 8000422:	f023 0320 	bic.w	r3, r3, #32
 8000426:	6213      	str	r3, [r2, #32]
	TIM2->CCER &=~ TIM_CCER_CC2NP;
 8000428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000430:	6a1b      	ldr	r3, [r3, #32]
 8000432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000436:	6213      	str	r3, [r2, #32]

	//TIM2->CCMR1 &=~ TIM_CCMR1_IC1PSC;

	TIM2->PSC = 0; // fCK_PSC / (PSC[15:0] + 1)
 8000438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800043c:	2200      	movs	r2, #0
 800043e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFFFFFF;
 8000440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000444:	f04f 32ff 	mov.w	r2, #4294967295
 8000448:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->ARR = 0xFFFF;
	TIM2->CNT = 0;
 800044a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24

	//TIM2->EGR |= TIM_EGR_CC1G; // Capture/Compare 1 Generation
	//TIM2->EGR |= TIM_EGR_CC2G;


	TIM2->CR1 |= TIM_CR1_CEN;
 8000452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6013      	str	r3, [r2, #0]

	//NVIC_EnableIRQ(TIM2_IRQn);

}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40023800 	.word	0x40023800
 8000470:	40020000 	.word	0x40020000

08000474 <TIM1_Init>:


void TIM1_Init(void);

void TIM1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000478:	4a32      	ldr	r2, [pc, #200]	; (8000544 <TIM1_Init+0xd0>)
 800047a:	4b32      	ldr	r3, [pc, #200]	; (8000544 <TIM1_Init+0xd0>)
 800047c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000484:	4a2f      	ldr	r2, [pc, #188]	; (8000544 <TIM1_Init+0xd0>)
 8000486:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <TIM1_Init+0xd0>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6313      	str	r3, [r2, #48]	; 0x30

	// GPIOA
	GPIOA->MODER |= GPIO_MODER_MODE8_1;
 8000490:	4a2d      	ldr	r2, [pc, #180]	; (8000548 <TIM1_Init+0xd4>)
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <TIM1_Init+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED8;
 800049c:	4a2a      	ldr	r2, [pc, #168]	; (8000548 <TIM1_Init+0xd4>)
 800049e:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <TIM1_Init+0xd4>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80004a6:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL8_0;
 80004a8:	4a27      	ldr	r2, [pc, #156]	; (8000548 <TIM1_Init+0xd4>)
 80004aa:	4b27      	ldr	r3, [pc, #156]	; (8000548 <TIM1_Init+0xd4>)
 80004ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6253      	str	r3, [r2, #36]	; 0x24


	// TIM1

	TIM1->CR1 |= TIM_CR1_ARPE; // Auto-reload preload enable
 80004b4:	4a25      	ldr	r2, [pc, #148]	; (800054c <TIM1_Init+0xd8>)
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <TIM1_Init+0xd8>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004be:	6013      	str	r3, [r2, #0]
	//TIM1->CR1 |= TIM_CR1_CMS; // Center-aligned mode selection
	//TIM1->CR1 |= TIM_CR1_DIR; // Direction

	// Mode reg
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // Output Compare 1 Mode
 80004c0:	4a22      	ldr	r2, [pc, #136]	; (800054c <TIM1_Init+0xd8>)
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <TIM1_Init+0xd8>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80004ca:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 &=~ TIM_CCMR1_CC1S; // Capture/Compare 1 Selection
 80004cc:	4a1f      	ldr	r2, [pc, #124]	; (800054c <TIM1_Init+0xd8>)
 80004ce:	4b1f      	ldr	r3, [pc, #124]	; (800054c <TIM1_Init+0xd8>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f023 0303 	bic.w	r3, r3, #3
 80004d6:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1PE; // Output Compare 1 Preload enable
 80004d8:	4a1c      	ldr	r2, [pc, #112]	; (800054c <TIM1_Init+0xd8>)
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <TIM1_Init+0xd8>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]

	// Enable reg
	//TIM1->CCER &=~ TIM_CCER_CC1P; //Capture/Compare 1 output Polarity
	TIM1->CCER |= TIM_CCER_CC1P;
 80004e4:	4a19      	ldr	r2, [pc, #100]	; (800054c <TIM1_Init+0xd8>)
 80004e6:	4b19      	ldr	r3, [pc, #100]	; (800054c <TIM1_Init+0xd8>)
 80004e8:	6a1b      	ldr	r3, [r3, #32]
 80004ea:	f043 0302 	orr.w	r3, r3, #2
 80004ee:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC1E; //Capture/Compare 1 output enable
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <TIM1_Init+0xd8>)
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <TIM1_Init+0xd8>)
 80004f4:	6a1b      	ldr	r3, [r3, #32]
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6213      	str	r3, [r2, #32]


	TIM1->PSC = 10;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <TIM1_Init+0xd8>)
 80004fe:	220a      	movs	r2, #10
 8000500:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 40; //100
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <TIM1_Init+0xd8>)
 8000504:	2228      	movs	r2, #40	; 0x28
 8000506:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 20;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <TIM1_Init+0xd8>)
 800050a:	2214      	movs	r2, #20
 800050c:	635a      	str	r2, [r3, #52]	; 0x34

	//TIM1->BDTR |= TIM_BDTR_DTG_7 | TIM_BDTR_DTG_3; //DTG[0:7] bits (Dead-Time Generator set-up)
	TIM1->BDTR |= TIM_BDTR_MOE; //Main Output enable
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <TIM1_Init+0xd8>)
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <TIM1_Init+0xd8>)
 8000512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000518:	6453      	str	r3, [r2, #68]	; 0x44
	//TIM1->EGR |= TIM_EGR_UG;
	TIM1->RCR = 1;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <TIM1_Init+0xd8>)
 800051c:	2201      	movs	r2, #1
 800051e:	631a      	str	r2, [r3, #48]	; 0x30

	TIM1->DIER |= TIM_DIER_UIE;
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <TIM1_Init+0xd8>)
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <TIM1_Init+0xd8>)
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	60d3      	str	r3, [r2, #12]
	//TIM1->DIER |= TIM_DIER_CC1IE;

	//TIM1->CR1 |= TIM_CR1_CKD_0;
	TIM1->CR1 |= TIM_CR1_CEN;
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <TIM1_Init+0xd8>)
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <TIM1_Init+0xd8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]

	//NVIC_EnableIRQ(TIM1_CC_IRQn);
	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000538:	2019      	movs	r0, #25
 800053a:	f7ff fe45 	bl	80001c8 <NVIC_EnableIRQ>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	40010000 	.word	0x40010000

08000550 <TB_Wait>:


// Functions

void TB_Wait(uint32_t time)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	hTimebase_500us = time;    // delay = 'time' value * 5ms
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <TB_Wait+0x28>)
 800055e:	801a      	strh	r2, [r3, #0]
	while (hTimebase_500us != 0){} // wait and do nothing!
 8000560:	bf00      	nop
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <TB_Wait+0x28>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b29b      	uxth	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1fa      	bne.n	8000562 <TB_Wait+0x12>
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	20000028 	.word	0x20000028

0800057c <setFreq>:

void setFreq(TIM_TypeDef* tim, uint16_t val)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]
    tim->ARR = val;
 8000588:	887a      	ldrh	r2, [r7, #2]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <setPulseWidth>:

void setPulseWidth(TIM_TypeDef* tim, uint16_t val)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	807b      	strh	r3, [r7, #2]
    tim->CCR1 = val;
 80005a6:	887a      	ldrh	r2, [r7, #2]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <main>:


int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	clockConfig();
 80005bc:	f7ff fe6a 	bl	8000294 <clockConfig>
	SystemCoreClockUpdate();
 80005c0:	f000 fa0e 	bl	80009e0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/1000);
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <main+0x70>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a18      	ldr	r2, [pc, #96]	; (800062c <main+0x74>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	099b      	lsrs	r3, r3, #6
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe3d 	bl	8000250 <SysTick_Config>
	TIM2_Init();
 80005d6:	f7ff febd 	bl	8000354 <TIM2_Init>
	TIM1_Init();
 80005da:	f7ff ff4b 	bl	8000474 <TIM1_Init>

	pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR , K_D * SCALING_FACTOR , &pidData);
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <main+0x78>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	210d      	movs	r1, #13
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f8e9 	bl	80007bc <pid_Init>

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <main+0x7c>)
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <main+0x7c>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= GPIO_MODER_MODER7_0 | GPIO_MODER_MODER6_0;
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <main+0x80>)
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <main+0x80>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000600:	6013      	str	r3, [r2, #0]

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000602:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <main+0x7c>)
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <main+0x7c>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER0_0;
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <main+0x84>)
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <main+0x84>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f043 0305 	orr.w	r3, r3, #5
 8000618:	6013      	str	r3, [r2, #0]
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED1 | GPIO_OSPEEDR_OSPEED0;
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <main+0x84>)
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <main+0x84>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f043 030f 	orr.w	r3, r3, #15
 8000624:	6093      	str	r3, [r2, #8]



	while(1)
 8000626:	e7fe      	b.n	8000626 <main+0x6e>
 8000628:	20000008 	.word	0x20000008
 800062c:	10624dd3 	.word	0x10624dd3
 8000630:	20000038 	.word	0x20000038
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000
 800063c:	40020400 	.word	0x40020400

08000640 <TIM1_UP_TIM10_IRQHandler>:
	return 0;
}


void TIM1_UP_TIM10_IRQHandler(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0

	TIM2->CNT = 0;
 8000646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24

	TIM2->SR &=~ TIM_SR_CC2IF;
 800064e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f023 0304 	bic.w	r3, r3, #4
 800065c:	6113      	str	r3, [r2, #16]
	TIM2->SR &=~ TIM_SR_CC1IF;
 800065e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	f023 0302 	bic.w	r3, r3, #2
 800066c:	6113      	str	r3, [r2, #16]

	while( ((TIM2->SR & TIM_SR_CC2IF) && (TIM2->SR & TIM_SR_CC1IF)) == 0 ){;}
 800066e:	bf00      	nop
 8000670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000674:	691b      	ldr	r3, [r3, #16]
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <TIM1_UP_TIM10_IRQHandler+0x50>
 800067e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <TIM1_UP_TIM10_IRQHandler+0x50>
 800068c:	2301      	movs	r3, #1
 800068e:	e000      	b.n	8000692 <TIM1_UP_TIM10_IRQHandler+0x52>
 8000690:	2300      	movs	r3, #0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0ec      	beq.n	8000670 <TIM1_UP_TIM10_IRQHandler+0x30>

	delayCCR2 = (TIM2->CCR2);
 8000696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800069a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800069c:	461a      	mov	r2, r3
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <TIM1_UP_TIM10_IRQHandler+0x110>)
 80006a0:	601a      	str	r2, [r3, #0]
	delayCCR1 = (TIM2->CCR1);
 80006a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <TIM1_UP_TIM10_IRQHandler+0x114>)
 80006ac:	601a      	str	r2, [r3, #0]

	//int32_t delay = ((delayCCR2) - (delayCCR1)); // CCR1 -> PWM
	//int32_t delay = ((delayCCR1) - (delayCCR2)); // CCR1 -> PWM ???

	//int32_t delay = ((delayCCR2) - (delayCCR1)) * 11.9; // CCR1 -> PWM
	int32_t delay = ((delayCCR1) - (delayCCR2)) * 11.9; // CCR1 -> PWM ???
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <TIM1_UP_TIM10_IRQHandler+0x114>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b27      	ldr	r3, [pc, #156]	; (8000750 <TIM1_UP_TIM10_IRQHandler+0x110>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fb67 	bl	8000d8c <__aeabi_i2d>
 80006be:	a322      	add	r3, pc, #136	; (adr r3, 8000748 <TIM1_UP_TIM10_IRQHandler+0x108>)
 80006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c4:	f000 fbc8 	bl	8000e58 <__aeabi_dmul>
 80006c8:	4603      	mov	r3, r0
 80006ca:	460c      	mov	r4, r1
 80006cc:	4618      	mov	r0, r3
 80006ce:	4621      	mov	r1, r4
 80006d0:	f000 fdd4 	bl	800127c <__aeabi_d2iz>
 80006d4:	4603      	mov	r3, r0
 80006d6:	603b      	str	r3, [r7, #0]
	//int32_t delay = (int32_t)((delayCCR2) - (delayCCR1)) * 11.9; // CCR1 -> PWM

	//PID regulator with feed forward from speed input.
	int32_t outputValue;
	outputValue = delayRef;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <TIM1_UP_TIM10_IRQHandler+0x118>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	607b      	str	r3, [r7, #4]
	outputValue += pid_Controller(delayRef, delay, &pidData);
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <TIM1_UP_TIM10_IRQHandler+0x118>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	b211      	sxth	r1, r2
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <TIM1_UP_TIM10_IRQHandler+0x11c>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f89c 	bl	8000828 <pid_Controller>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	607b      	str	r3, [r7, #4]

		//int32_t error = delayRef - delay;
		//outputValue += error;

	if (outputValue < 40)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b27      	cmp	r3, #39	; 0x27
 80006fe:	dc02      	bgt.n	8000706 <TIM1_UP_TIM10_IRQHandler+0xc6>
	{
		outputValue = 40;
 8000700:	2328      	movs	r3, #40	; 0x28
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	e007      	b.n	8000716 <TIM1_UP_TIM10_IRQHandler+0xd6>
	}
	else if (outputValue > 20000)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f644 6220 	movw	r2, #20000	; 0x4e20
 800070c:	4293      	cmp	r3, r2
 800070e:	dd02      	ble.n	8000716 <TIM1_UP_TIM10_IRQHandler+0xd6>
	{
		outputValue = 20000;
 8000710:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000714:	607b      	str	r3, [r7, #4]
	}

	setFreq(TIM1, outputValue);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b29b      	uxth	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <TIM1_UP_TIM10_IRQHandler+0x120>)
 800071e:	f7ff ff2d 	bl	800057c <setFreq>
	setPulseWidth(TIM1, outputValue / 2);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	0fda      	lsrs	r2, r3, #31
 8000726:	4413      	add	r3, r2
 8000728:	105b      	asrs	r3, r3, #1
 800072a:	b29b      	uxth	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <TIM1_UP_TIM10_IRQHandler+0x120>)
 8000730:	f7ff ff33 	bl	800059a <setPulseWidth>

	TIM1->SR &=~ TIM_SR_UIF;
 8000734:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <TIM1_UP_TIM10_IRQHandler+0x120>)
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <TIM1_UP_TIM10_IRQHandler+0x120>)
 8000738:	691b      	ldr	r3, [r3, #16]
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	6113      	str	r3, [r2, #16]

}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	cccccccd 	.word	0xcccccccd
 800074c:	4027cccc 	.word	0x4027cccc
 8000750:	20000030 	.word	0x20000030
 8000754:	20000034 	.word	0x20000034
 8000758:	20000004 	.word	0x20000004
 800075c:	20000038 	.word	0x20000038
 8000760:	40010000 	.word	0x40010000

08000764 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
	TIM1->SR &=~ TIM_SR_CC1IF;
 8000768:	4a05      	ldr	r2, [pc, #20]	; (8000780 <TIM1_CC_IRQHandler+0x1c>)
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <TIM1_CC_IRQHandler+0x1c>)
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	f023 0302 	bic.w	r3, r3, #2
 8000772:	6113      	str	r3, [r2, #16]
	//WRITE_REG(GPIOB->ODR, READ_REG(GPIOB->ODR) ^ GPIO_ODR_OD0);
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40010000 	.word	0x40010000

08000784 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

	//WRITE_REG(GPIOB->ODR, READ_REG(GPIOB->ODR) ^ GPIO_ODR_OD0);
	//WRITE_REG(GPIOB->ODR, READ_REG(GPIOB->ODR) ^ GPIO_ODR_OD1);


}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

	if (hTimebase_500us != 0)
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <SysTick_Handler+0x26>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b29b      	uxth	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <SysTick_Handler+0x1c>
	{
		hTimebase_500us --;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Handler+0x26>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	3b01      	subs	r3, #1
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <SysTick_Handler+0x26>)
 80007ac:	801a      	strh	r2, [r3, #0]
	}
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	20000028 	.word	0x20000028

080007bc <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4603      	mov	r3, r0
 80007c6:	81fb      	strh	r3, [r7, #14]
 80007c8:	460b      	mov	r3, r1
 80007ca:	81bb      	strh	r3, [r7, #12]
 80007cc:	4613      	mov	r3, r2
 80007ce:	817b      	strh	r3, [r7, #10]
  // Start values for PID controller
  pid->sumError = 0;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  pid->lastProcessValue = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	801a      	strh	r2, [r3, #0]
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	89fa      	ldrh	r2, [r7, #14]
 80007e0:	811a      	strh	r2, [r3, #8]
  pid->I_Factor = i_factor;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	89ba      	ldrh	r2, [r7, #12]
 80007e6:	815a      	strh	r2, [r3, #10]
  pid->D_Factor = d_factor;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	897a      	ldrh	r2, [r7, #10]
 80007ec:	819a      	strh	r2, [r3, #12]
  // Limits to avoid overflow
  pid->maxError = MAX_INT / (pid->P_Factor + 1);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007f4:	3301      	adds	r3, #1
 80007f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80007fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80007fe:	b21a      	sxth	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	81da      	strh	r2, [r3, #14]
  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800080a:	3301      	adds	r3, #1
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <pid_Init+0x68>)
 800080e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	611a      	str	r2, [r3, #16]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	7fff0001 	.word	0x7fff0001

08000828 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	603a      	str	r2, [r7, #0]
 8000832:	80fb      	strh	r3, [r7, #6]
 8000834:	460b      	mov	r3, r1
 8000836:	80bb      	strh	r3, [r7, #4]
  int16_t error, p_term, d_term;
  int32_t i_term, ret, temp;

  error = setPoint - processValue;
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	b29b      	uxth	r3, r3
 8000840:	827b      	strh	r3, [r7, #18]

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError){
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000848:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800084c:	429a      	cmp	r2, r3
 800084e:	dd03      	ble.n	8000858 <pid_Controller+0x30>
    p_term = MAX_INT;
 8000850:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000854:	83fb      	strh	r3, [r7, #30]
 8000856:	e014      	b.n	8000882 <pid_Controller+0x5a>
  }
  else if (error < -pid_st->maxError){
 8000858:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000862:	425b      	negs	r3, r3
 8000864:	429a      	cmp	r2, r3
 8000866:	da03      	bge.n	8000870 <pid_Controller+0x48>
    p_term = -MAX_INT;
 8000868:	f248 0301 	movw	r3, #32769	; 0x8001
 800086c:	83fb      	strh	r3, [r7, #30]
 800086e:	e008      	b.n	8000882 <pid_Controller+0x5a>
  }
  else{
    p_term = pid_st->P_Factor * error;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000876:	b29a      	uxth	r2, r3
 8000878:	8a7b      	ldrh	r3, [r7, #18]
 800087a:	fb12 f303 	smulbb	r3, r2, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	83fb      	strh	r3, [r7, #30]
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  if(temp > pid_st->maxSumError){
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	691a      	ldr	r2, [r3, #16]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	da06      	bge.n	80008a6 <pid_Controller+0x7e>
    i_term = MAX_I_TERM;
 8000898:	4b2c      	ldr	r3, [pc, #176]	; (800094c <pid_Controller+0x124>)
 800089a:	61bb      	str	r3, [r7, #24]
    pid_st->sumError = pid_st->maxSumError;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	691a      	ldr	r2, [r3, #16]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	e019      	b.n	80008da <pid_Controller+0xb2>
  }
  else if(temp < -pid_st->maxSumError){
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	425a      	negs	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dd07      	ble.n	80008c2 <pid_Controller+0x9a>
    i_term = -MAX_I_TERM;
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <pid_Controller+0x128>)
 80008b4:	61bb      	str	r3, [r7, #24]
    pid_st->sumError = -pid_st->maxSumError;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	425a      	negs	r2, r3
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	e00b      	b.n	80008da <pid_Controller+0xb2>
  }
  else{
    pid_st->sumError = temp;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	605a      	str	r2, [r3, #4]
    i_term = pid_st->I_Factor * pid_st->sumError;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80008ce:	461a      	mov	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	fb03 f302 	mul.w	r3, r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
  }

  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008ee:	1acb      	subs	r3, r1, r3
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	fb12 f303 	smulbb	r3, r2, r3
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	817b      	strh	r3, [r7, #10]

  pid_st->lastProcessValue = processValue;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	88ba      	ldrh	r2, [r7, #4]
 80008fe:	801a      	strh	r2, [r3, #0]

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
 8000900:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	441a      	add	r2, r3
 8000908:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800090c:	4413      	add	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	da03      	bge.n	800091a <pid_Controller+0xf2>
 8000912:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8000916:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800091a:	145b      	asrs	r3, r3, #17
 800091c:	617b      	str	r3, [r7, #20]
  if(ret > MAX_INT){
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000924:	db03      	blt.n	800092e <pid_Controller+0x106>
    ret = MAX_INT;
 8000926:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e005      	b.n	800093a <pid_Controller+0x112>
  }
  else if(ret < -MAX_INT){
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000934:	dc01      	bgt.n	800093a <pid_Controller+0x112>
    ret = -MAX_INT;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <pid_Controller+0x12c>)
 8000938:	617b      	str	r3, [r7, #20]
  }

  return((int16_t)ret);
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	b21b      	sxth	r3, r3
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	7fff0001 	.word	0x7fff0001
 8000950:	8000ffff 	.word	0x8000ffff
 8000954:	ffff8001 	.word	0xffff8001

08000958 <pid_Reset_Integrator>:
/*! \brief Resets the integrator.
 *
 *  Calling this function will reset the integrator in the PID regulator.
 */
void pid_Reset_Integrator(pidData_t *pid_st)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  pid_st->sumError = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <SystemInit+0x60>)
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <SystemInit+0x60>)
 800097c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <SystemInit+0x64>)
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <SystemInit+0x64>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <SystemInit+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <SystemInit+0x64>)
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <SystemInit+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <SystemInit+0x64>)
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <SystemInit+0x68>)
 80009ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009b0:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <SystemInit+0x64>)
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <SystemInit+0x64>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SystemInit+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SystemInit+0x60>)
 80009c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c8:	609a      	str	r2, [r3, #8]
#endif
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00
 80009d8:	40023800 	.word	0x40023800
 80009dc:	24003010 	.word	0x24003010

080009e0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	2302      	movs	r3, #2
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	2302      	movs	r3, #2
 80009f8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009fa:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <SystemCoreClockUpdate+0xe0>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	f003 030c 	and.w	r3, r3, #12
 8000a02:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d007      	beq.n	8000a1a <SystemCoreClockUpdate+0x3a>
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	d009      	beq.n	8000a22 <SystemCoreClockUpdate+0x42>
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d13d      	bne.n	8000a8e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <SystemCoreClockUpdate+0xe4>)
 8000a14:	4a2c      	ldr	r2, [pc, #176]	; (8000ac8 <SystemCoreClockUpdate+0xe8>)
 8000a16:	601a      	str	r2, [r3, #0]
      break;
 8000a18:	e03d      	b.n	8000a96 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <SystemCoreClockUpdate+0xe4>)
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <SystemCoreClockUpdate+0xec>)
 8000a1e:	601a      	str	r2, [r3, #0]
      break;
 8000a20:	e039      	b.n	8000a96 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <SystemCoreClockUpdate+0xe0>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	0d9b      	lsrs	r3, r3, #22
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <SystemCoreClockUpdate+0xe0>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a36:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00c      	beq.n	8000a58 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <SystemCoreClockUpdate+0xec>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <SystemCoreClockUpdate+0xe0>)
 8000a48:	6852      	ldr	r2, [r2, #4]
 8000a4a:	0992      	lsrs	r2, r2, #6
 8000a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e00b      	b.n	8000a70 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <SystemCoreClockUpdate+0xe8>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a60:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <SystemCoreClockUpdate+0xe0>)
 8000a62:	6852      	ldr	r2, [r2, #4]
 8000a64:	0992      	lsrs	r2, r2, #6
 8000a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <SystemCoreClockUpdate+0xe0>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	0c1b      	lsrs	r3, r3, #16
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <SystemCoreClockUpdate+0xe4>)
 8000a8a:	6013      	str	r3, [r2, #0]
      break;
 8000a8c:	e003      	b.n	8000a96 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <SystemCoreClockUpdate+0xe4>)
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <SystemCoreClockUpdate+0xe8>)
 8000a92:	601a      	str	r2, [r3, #0]
      break;
 8000a94:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <SystemCoreClockUpdate+0xe0>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	091b      	lsrs	r3, r3, #4
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <SystemCoreClockUpdate+0xf0>)
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <SystemCoreClockUpdate+0xe4>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <SystemCoreClockUpdate+0xe4>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	00f42400 	.word	0x00f42400
 8000acc:	007a1200 	.word	0x007a1200
 8000ad0:	08001384 	.word	0x08001384
 8000ad4:	080013a4 	.word	0x080013a4
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	2000004c 	.word	0x2000004c

08000ae8 <__aeabi_drsub>:
 8000ae8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__adddf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_dsub>:
 8000af0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000af4 <__adddf3>:
 8000af4:	b530      	push	{r4, r5, lr}
 8000af6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000afa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000afe:	ea94 0f05 	teq	r4, r5
 8000b02:	bf08      	it	eq
 8000b04:	ea90 0f02 	teqeq	r0, r2
 8000b08:	bf1f      	itttt	ne
 8000b0a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000b0e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000b12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000b16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000b1a:	f000 80e2 	beq.w	8000ce2 <__adddf3+0x1ee>
 8000b1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000b22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000b26:	bfb8      	it	lt
 8000b28:	426d      	neglt	r5, r5
 8000b2a:	dd0c      	ble.n	8000b46 <__adddf3+0x52>
 8000b2c:	442c      	add	r4, r5
 8000b2e:	ea80 0202 	eor.w	r2, r0, r2
 8000b32:	ea81 0303 	eor.w	r3, r1, r3
 8000b36:	ea82 0000 	eor.w	r0, r2, r0
 8000b3a:	ea83 0101 	eor.w	r1, r3, r1
 8000b3e:	ea80 0202 	eor.w	r2, r0, r2
 8000b42:	ea81 0303 	eor.w	r3, r1, r3
 8000b46:	2d36      	cmp	r5, #54	; 0x36
 8000b48:	bf88      	it	hi
 8000b4a:	bd30      	pophi	{r4, r5, pc}
 8000b4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000b58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000b5c:	d002      	beq.n	8000b64 <__adddf3+0x70>
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000b68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000b70:	d002      	beq.n	8000b78 <__adddf3+0x84>
 8000b72:	4252      	negs	r2, r2
 8000b74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b78:	ea94 0f05 	teq	r4, r5
 8000b7c:	f000 80a7 	beq.w	8000cce <__adddf3+0x1da>
 8000b80:	f1a4 0401 	sub.w	r4, r4, #1
 8000b84:	f1d5 0e20 	rsbs	lr, r5, #32
 8000b88:	db0d      	blt.n	8000ba6 <__adddf3+0xb2>
 8000b8a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000b8e:	fa22 f205 	lsr.w	r2, r2, r5
 8000b92:	1880      	adds	r0, r0, r2
 8000b94:	f141 0100 	adc.w	r1, r1, #0
 8000b98:	fa03 f20e 	lsl.w	r2, r3, lr
 8000b9c:	1880      	adds	r0, r0, r2
 8000b9e:	fa43 f305 	asr.w	r3, r3, r5
 8000ba2:	4159      	adcs	r1, r3
 8000ba4:	e00e      	b.n	8000bc4 <__adddf3+0xd0>
 8000ba6:	f1a5 0520 	sub.w	r5, r5, #32
 8000baa:	f10e 0e20 	add.w	lr, lr, #32
 8000bae:	2a01      	cmp	r2, #1
 8000bb0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000bb4:	bf28      	it	cs
 8000bb6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000bba:	fa43 f305 	asr.w	r3, r3, r5
 8000bbe:	18c0      	adds	r0, r0, r3
 8000bc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000bc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bc8:	d507      	bpl.n	8000bda <__adddf3+0xe6>
 8000bca:	f04f 0e00 	mov.w	lr, #0
 8000bce:	f1dc 0c00 	rsbs	ip, ip, #0
 8000bd2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000bd6:	eb6e 0101 	sbc.w	r1, lr, r1
 8000bda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000bde:	d31b      	bcc.n	8000c18 <__adddf3+0x124>
 8000be0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000be4:	d30c      	bcc.n	8000c00 <__adddf3+0x10c>
 8000be6:	0849      	lsrs	r1, r1, #1
 8000be8:	ea5f 0030 	movs.w	r0, r0, rrx
 8000bec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000bf0:	f104 0401 	add.w	r4, r4, #1
 8000bf4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000bf8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000bfc:	f080 809a 	bcs.w	8000d34 <__adddf3+0x240>
 8000c00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c04:	bf08      	it	eq
 8000c06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c0a:	f150 0000 	adcs.w	r0, r0, #0
 8000c0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c12:	ea41 0105 	orr.w	r1, r1, r5
 8000c16:	bd30      	pop	{r4, r5, pc}
 8000c18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000c1c:	4140      	adcs	r0, r0
 8000c1e:	eb41 0101 	adc.w	r1, r1, r1
 8000c22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c26:	f1a4 0401 	sub.w	r4, r4, #1
 8000c2a:	d1e9      	bne.n	8000c00 <__adddf3+0x10c>
 8000c2c:	f091 0f00 	teq	r1, #0
 8000c30:	bf04      	itt	eq
 8000c32:	4601      	moveq	r1, r0
 8000c34:	2000      	moveq	r0, #0
 8000c36:	fab1 f381 	clz	r3, r1
 8000c3a:	bf08      	it	eq
 8000c3c:	3320      	addeq	r3, #32
 8000c3e:	f1a3 030b 	sub.w	r3, r3, #11
 8000c42:	f1b3 0220 	subs.w	r2, r3, #32
 8000c46:	da0c      	bge.n	8000c62 <__adddf3+0x16e>
 8000c48:	320c      	adds	r2, #12
 8000c4a:	dd08      	ble.n	8000c5e <__adddf3+0x16a>
 8000c4c:	f102 0c14 	add.w	ip, r2, #20
 8000c50:	f1c2 020c 	rsb	r2, r2, #12
 8000c54:	fa01 f00c 	lsl.w	r0, r1, ip
 8000c58:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5c:	e00c      	b.n	8000c78 <__adddf3+0x184>
 8000c5e:	f102 0214 	add.w	r2, r2, #20
 8000c62:	bfd8      	it	le
 8000c64:	f1c2 0c20 	rsble	ip, r2, #32
 8000c68:	fa01 f102 	lsl.w	r1, r1, r2
 8000c6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c70:	bfdc      	itt	le
 8000c72:	ea41 010c 	orrle.w	r1, r1, ip
 8000c76:	4090      	lslle	r0, r2
 8000c78:	1ae4      	subs	r4, r4, r3
 8000c7a:	bfa2      	ittt	ge
 8000c7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000c80:	4329      	orrge	r1, r5
 8000c82:	bd30      	popge	{r4, r5, pc}
 8000c84:	ea6f 0404 	mvn.w	r4, r4
 8000c88:	3c1f      	subs	r4, #31
 8000c8a:	da1c      	bge.n	8000cc6 <__adddf3+0x1d2>
 8000c8c:	340c      	adds	r4, #12
 8000c8e:	dc0e      	bgt.n	8000cae <__adddf3+0x1ba>
 8000c90:	f104 0414 	add.w	r4, r4, #20
 8000c94:	f1c4 0220 	rsb	r2, r4, #32
 8000c98:	fa20 f004 	lsr.w	r0, r0, r4
 8000c9c:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	fa21 f304 	lsr.w	r3, r1, r4
 8000ca8:	ea45 0103 	orr.w	r1, r5, r3
 8000cac:	bd30      	pop	{r4, r5, pc}
 8000cae:	f1c4 040c 	rsb	r4, r4, #12
 8000cb2:	f1c4 0220 	rsb	r2, r4, #32
 8000cb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cba:	fa01 f304 	lsl.w	r3, r1, r4
 8000cbe:	ea40 0003 	orr.w	r0, r0, r3
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	bd30      	pop	{r4, r5, pc}
 8000cc6:	fa21 f004 	lsr.w	r0, r1, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	bd30      	pop	{r4, r5, pc}
 8000cce:	f094 0f00 	teq	r4, #0
 8000cd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000cd6:	bf06      	itte	eq
 8000cd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000cdc:	3401      	addeq	r4, #1
 8000cde:	3d01      	subne	r5, #1
 8000ce0:	e74e      	b.n	8000b80 <__adddf3+0x8c>
 8000ce2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000ce6:	bf18      	it	ne
 8000ce8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000cec:	d029      	beq.n	8000d42 <__adddf3+0x24e>
 8000cee:	ea94 0f05 	teq	r4, r5
 8000cf2:	bf08      	it	eq
 8000cf4:	ea90 0f02 	teqeq	r0, r2
 8000cf8:	d005      	beq.n	8000d06 <__adddf3+0x212>
 8000cfa:	ea54 0c00 	orrs.w	ip, r4, r0
 8000cfe:	bf04      	itt	eq
 8000d00:	4619      	moveq	r1, r3
 8000d02:	4610      	moveq	r0, r2
 8000d04:	bd30      	pop	{r4, r5, pc}
 8000d06:	ea91 0f03 	teq	r1, r3
 8000d0a:	bf1e      	ittt	ne
 8000d0c:	2100      	movne	r1, #0
 8000d0e:	2000      	movne	r0, #0
 8000d10:	bd30      	popne	{r4, r5, pc}
 8000d12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000d16:	d105      	bne.n	8000d24 <__adddf3+0x230>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	4149      	adcs	r1, r1
 8000d1c:	bf28      	it	cs
 8000d1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000d22:	bd30      	pop	{r4, r5, pc}
 8000d24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000d28:	bf3c      	itt	cc
 8000d2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000d2e:	bd30      	popcc	{r4, r5, pc}
 8000d30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000d34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000d38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d3c:	f04f 0000 	mov.w	r0, #0
 8000d40:	bd30      	pop	{r4, r5, pc}
 8000d42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000d46:	bf1a      	itte	ne
 8000d48:	4619      	movne	r1, r3
 8000d4a:	4610      	movne	r0, r2
 8000d4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000d50:	bf1c      	itt	ne
 8000d52:	460b      	movne	r3, r1
 8000d54:	4602      	movne	r2, r0
 8000d56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d5a:	bf06      	itte	eq
 8000d5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000d60:	ea91 0f03 	teqeq	r1, r3
 8000d64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000d68:	bd30      	pop	{r4, r5, pc}
 8000d6a:	bf00      	nop

08000d6c <__aeabi_ui2d>:
 8000d6c:	f090 0f00 	teq	r0, #0
 8000d70:	bf04      	itt	eq
 8000d72:	2100      	moveq	r1, #0
 8000d74:	4770      	bxeq	lr
 8000d76:	b530      	push	{r4, r5, lr}
 8000d78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d80:	f04f 0500 	mov.w	r5, #0
 8000d84:	f04f 0100 	mov.w	r1, #0
 8000d88:	e750      	b.n	8000c2c <__adddf3+0x138>
 8000d8a:	bf00      	nop

08000d8c <__aeabi_i2d>:
 8000d8c:	f090 0f00 	teq	r0, #0
 8000d90:	bf04      	itt	eq
 8000d92:	2100      	moveq	r1, #0
 8000d94:	4770      	bxeq	lr
 8000d96:	b530      	push	{r4, r5, lr}
 8000d98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000da0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000da4:	bf48      	it	mi
 8000da6:	4240      	negmi	r0, r0
 8000da8:	f04f 0100 	mov.w	r1, #0
 8000dac:	e73e      	b.n	8000c2c <__adddf3+0x138>
 8000dae:	bf00      	nop

08000db0 <__aeabi_f2d>:
 8000db0:	0042      	lsls	r2, r0, #1
 8000db2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000db6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000dba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000dbe:	bf1f      	itttt	ne
 8000dc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000dc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000dc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000dcc:	4770      	bxne	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000dd8:	4770      	bxeq	lr
 8000dda:	b530      	push	{r4, r5, lr}
 8000ddc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000de0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000de8:	e720      	b.n	8000c2c <__adddf3+0x138>
 8000dea:	bf00      	nop

08000dec <__aeabi_ul2d>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	b530      	push	{r4, r5, lr}
 8000df6:	f04f 0500 	mov.w	r5, #0
 8000dfa:	e00a      	b.n	8000e12 <__aeabi_l2d+0x16>

08000dfc <__aeabi_l2d>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	b530      	push	{r4, r5, lr}
 8000e06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000e0a:	d502      	bpl.n	8000e12 <__aeabi_l2d+0x16>
 8000e0c:	4240      	negs	r0, r0
 8000e0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000e16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000e1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000e1e:	f43f aedc 	beq.w	8000bda <__adddf3+0xe6>
 8000e22:	f04f 0203 	mov.w	r2, #3
 8000e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000e2a:	bf18      	it	ne
 8000e2c:	3203      	addne	r2, #3
 8000e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000e32:	bf18      	it	ne
 8000e34:	3203      	addne	r2, #3
 8000e36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000e3a:	f1c2 0320 	rsb	r3, r2, #32
 8000e3e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e42:	fa20 f002 	lsr.w	r0, r0, r2
 8000e46:	fa01 fe03 	lsl.w	lr, r1, r3
 8000e4a:	ea40 000e 	orr.w	r0, r0, lr
 8000e4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e52:	4414      	add	r4, r2
 8000e54:	e6c1      	b.n	8000bda <__adddf3+0xe6>
 8000e56:	bf00      	nop

08000e58 <__aeabi_dmul>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e66:	bf1d      	ittte	ne
 8000e68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000e6c:	ea94 0f0c 	teqne	r4, ip
 8000e70:	ea95 0f0c 	teqne	r5, ip
 8000e74:	f000 f8de 	bleq	8001034 <__aeabi_dmul+0x1dc>
 8000e78:	442c      	add	r4, r5
 8000e7a:	ea81 0603 	eor.w	r6, r1, r3
 8000e7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000e82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000e86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000e8a:	bf18      	it	ne
 8000e8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e98:	d038      	beq.n	8000f0c <__aeabi_dmul+0xb4>
 8000e9a:	fba0 ce02 	umull	ip, lr, r0, r2
 8000e9e:	f04f 0500 	mov.w	r5, #0
 8000ea2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000ea6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000eaa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000eae:	f04f 0600 	mov.w	r6, #0
 8000eb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000eb6:	f09c 0f00 	teq	ip, #0
 8000eba:	bf18      	it	ne
 8000ebc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000ec0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000ec8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000ecc:	d204      	bcs.n	8000ed8 <__aeabi_dmul+0x80>
 8000ece:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000ed2:	416d      	adcs	r5, r5
 8000ed4:	eb46 0606 	adc.w	r6, r6, r6
 8000ed8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000edc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000ee0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000ee4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000ee8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000eec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ef0:	bf88      	it	hi
 8000ef2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ef6:	d81e      	bhi.n	8000f36 <__aeabi_dmul+0xde>
 8000ef8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000efc:	bf08      	it	eq
 8000efe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000f02:	f150 0000 	adcs.w	r0, r0, #0
 8000f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000f10:	ea46 0101 	orr.w	r1, r6, r1
 8000f14:	ea40 0002 	orr.w	r0, r0, r2
 8000f18:	ea81 0103 	eor.w	r1, r1, r3
 8000f1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000f20:	bfc2      	ittt	gt
 8000f22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f2a:	bd70      	popgt	{r4, r5, r6, pc}
 8000f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f30:	f04f 0e00 	mov.w	lr, #0
 8000f34:	3c01      	subs	r4, #1
 8000f36:	f300 80ab 	bgt.w	8001090 <__aeabi_dmul+0x238>
 8000f3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000f3e:	bfde      	ittt	le
 8000f40:	2000      	movle	r0, #0
 8000f42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000f46:	bd70      	pople	{r4, r5, r6, pc}
 8000f48:	f1c4 0400 	rsb	r4, r4, #0
 8000f4c:	3c20      	subs	r4, #32
 8000f4e:	da35      	bge.n	8000fbc <__aeabi_dmul+0x164>
 8000f50:	340c      	adds	r4, #12
 8000f52:	dc1b      	bgt.n	8000f8c <__aeabi_dmul+0x134>
 8000f54:	f104 0414 	add.w	r4, r4, #20
 8000f58:	f1c4 0520 	rsb	r5, r4, #32
 8000f5c:	fa00 f305 	lsl.w	r3, r0, r5
 8000f60:	fa20 f004 	lsr.w	r0, r0, r4
 8000f64:	fa01 f205 	lsl.w	r2, r1, r5
 8000f68:	ea40 0002 	orr.w	r0, r0, r2
 8000f6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000f74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000f78:	fa21 f604 	lsr.w	r6, r1, r4
 8000f7c:	eb42 0106 	adc.w	r1, r2, r6
 8000f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000f84:	bf08      	it	eq
 8000f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
 8000f8c:	f1c4 040c 	rsb	r4, r4, #12
 8000f90:	f1c4 0520 	rsb	r5, r4, #32
 8000f94:	fa00 f304 	lsl.w	r3, r0, r4
 8000f98:	fa20 f005 	lsr.w	r0, r0, r5
 8000f9c:	fa01 f204 	lsl.w	r2, r1, r4
 8000fa0:	ea40 0002 	orr.w	r0, r0, r2
 8000fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000fac:	f141 0100 	adc.w	r1, r1, #0
 8000fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000fb4:	bf08      	it	eq
 8000fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
 8000fbc:	f1c4 0520 	rsb	r5, r4, #32
 8000fc0:	fa00 f205 	lsl.w	r2, r0, r5
 8000fc4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000fc8:	fa20 f304 	lsr.w	r3, r0, r4
 8000fcc:	fa01 f205 	lsl.w	r2, r1, r5
 8000fd0:	ea43 0302 	orr.w	r3, r3, r2
 8000fd4:	fa21 f004 	lsr.w	r0, r1, r4
 8000fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000fdc:	fa21 f204 	lsr.w	r2, r1, r4
 8000fe0:	ea20 0002 	bic.w	r0, r0, r2
 8000fe4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000fec:	bf08      	it	eq
 8000fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	f094 0f00 	teq	r4, #0
 8000ff8:	d10f      	bne.n	800101a <__aeabi_dmul+0x1c2>
 8000ffa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000ffe:	0040      	lsls	r0, r0, #1
 8001000:	eb41 0101 	adc.w	r1, r1, r1
 8001004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001008:	bf08      	it	eq
 800100a:	3c01      	subeq	r4, #1
 800100c:	d0f7      	beq.n	8000ffe <__aeabi_dmul+0x1a6>
 800100e:	ea41 0106 	orr.w	r1, r1, r6
 8001012:	f095 0f00 	teq	r5, #0
 8001016:	bf18      	it	ne
 8001018:	4770      	bxne	lr
 800101a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	eb43 0303 	adc.w	r3, r3, r3
 8001024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001028:	bf08      	it	eq
 800102a:	3d01      	subeq	r5, #1
 800102c:	d0f7      	beq.n	800101e <__aeabi_dmul+0x1c6>
 800102e:	ea43 0306 	orr.w	r3, r3, r6
 8001032:	4770      	bx	lr
 8001034:	ea94 0f0c 	teq	r4, ip
 8001038:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800103c:	bf18      	it	ne
 800103e:	ea95 0f0c 	teqne	r5, ip
 8001042:	d00c      	beq.n	800105e <__aeabi_dmul+0x206>
 8001044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001048:	bf18      	it	ne
 800104a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800104e:	d1d1      	bne.n	8000ff4 <__aeabi_dmul+0x19c>
 8001050:	ea81 0103 	eor.w	r1, r1, r3
 8001054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	bd70      	pop	{r4, r5, r6, pc}
 800105e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001062:	bf06      	itte	eq
 8001064:	4610      	moveq	r0, r2
 8001066:	4619      	moveq	r1, r3
 8001068:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800106c:	d019      	beq.n	80010a2 <__aeabi_dmul+0x24a>
 800106e:	ea94 0f0c 	teq	r4, ip
 8001072:	d102      	bne.n	800107a <__aeabi_dmul+0x222>
 8001074:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001078:	d113      	bne.n	80010a2 <__aeabi_dmul+0x24a>
 800107a:	ea95 0f0c 	teq	r5, ip
 800107e:	d105      	bne.n	800108c <__aeabi_dmul+0x234>
 8001080:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001084:	bf1c      	itt	ne
 8001086:	4610      	movne	r0, r2
 8001088:	4619      	movne	r1, r3
 800108a:	d10a      	bne.n	80010a2 <__aeabi_dmul+0x24a>
 800108c:	ea81 0103 	eor.w	r1, r1, r3
 8001090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001094:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800109c:	f04f 0000 	mov.w	r0, #0
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
 80010a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80010a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80010aa:	bd70      	pop	{r4, r5, r6, pc}

080010ac <__aeabi_ddiv>:
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80010b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80010b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80010ba:	bf1d      	ittte	ne
 80010bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80010c0:	ea94 0f0c 	teqne	r4, ip
 80010c4:	ea95 0f0c 	teqne	r5, ip
 80010c8:	f000 f8a7 	bleq	800121a <__aeabi_ddiv+0x16e>
 80010cc:	eba4 0405 	sub.w	r4, r4, r5
 80010d0:	ea81 0e03 	eor.w	lr, r1, r3
 80010d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80010d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80010dc:	f000 8088 	beq.w	80011f0 <__aeabi_ddiv+0x144>
 80010e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80010e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80010e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80010ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80010f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80010f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80010f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80010fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001100:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001104:	429d      	cmp	r5, r3
 8001106:	bf08      	it	eq
 8001108:	4296      	cmpeq	r6, r2
 800110a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800110e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001112:	d202      	bcs.n	800111a <__aeabi_ddiv+0x6e>
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	ea4f 0232 	mov.w	r2, r2, rrx
 800111a:	1ab6      	subs	r6, r6, r2
 800111c:	eb65 0503 	sbc.w	r5, r5, r3
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	ea4f 0232 	mov.w	r2, r2, rrx
 8001126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800112a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800112e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001132:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001136:	bf22      	ittt	cs
 8001138:	1ab6      	subcs	r6, r6, r2
 800113a:	4675      	movcs	r5, lr
 800113c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001140:	085b      	lsrs	r3, r3, #1
 8001142:	ea4f 0232 	mov.w	r2, r2, rrx
 8001146:	ebb6 0e02 	subs.w	lr, r6, r2
 800114a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800114e:	bf22      	ittt	cs
 8001150:	1ab6      	subcs	r6, r6, r2
 8001152:	4675      	movcs	r5, lr
 8001154:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001158:	085b      	lsrs	r3, r3, #1
 800115a:	ea4f 0232 	mov.w	r2, r2, rrx
 800115e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001162:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001166:	bf22      	ittt	cs
 8001168:	1ab6      	subcs	r6, r6, r2
 800116a:	4675      	movcs	r5, lr
 800116c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	ea4f 0232 	mov.w	r2, r2, rrx
 8001176:	ebb6 0e02 	subs.w	lr, r6, r2
 800117a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800117e:	bf22      	ittt	cs
 8001180:	1ab6      	subcs	r6, r6, r2
 8001182:	4675      	movcs	r5, lr
 8001184:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001188:	ea55 0e06 	orrs.w	lr, r5, r6
 800118c:	d018      	beq.n	80011c0 <__aeabi_ddiv+0x114>
 800118e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001192:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001196:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800119a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800119e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80011a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80011a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80011aa:	d1c0      	bne.n	800112e <__aeabi_ddiv+0x82>
 80011ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80011b0:	d10b      	bne.n	80011ca <__aeabi_ddiv+0x11e>
 80011b2:	ea41 0100 	orr.w	r1, r1, r0
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80011be:	e7b6      	b.n	800112e <__aeabi_ddiv+0x82>
 80011c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80011c4:	bf04      	itt	eq
 80011c6:	4301      	orreq	r1, r0
 80011c8:	2000      	moveq	r0, #0
 80011ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80011ce:	bf88      	it	hi
 80011d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80011d4:	f63f aeaf 	bhi.w	8000f36 <__aeabi_dmul+0xde>
 80011d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80011dc:	bf04      	itt	eq
 80011de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80011e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80011e6:	f150 0000 	adcs.w	r0, r0, #0
 80011ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
 80011f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80011f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80011f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80011fc:	bfc2      	ittt	gt
 80011fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001206:	bd70      	popgt	{r4, r5, r6, pc}
 8001208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800120c:	f04f 0e00 	mov.w	lr, #0
 8001210:	3c01      	subs	r4, #1
 8001212:	e690      	b.n	8000f36 <__aeabi_dmul+0xde>
 8001214:	ea45 0e06 	orr.w	lr, r5, r6
 8001218:	e68d      	b.n	8000f36 <__aeabi_dmul+0xde>
 800121a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800121e:	ea94 0f0c 	teq	r4, ip
 8001222:	bf08      	it	eq
 8001224:	ea95 0f0c 	teqeq	r5, ip
 8001228:	f43f af3b 	beq.w	80010a2 <__aeabi_dmul+0x24a>
 800122c:	ea94 0f0c 	teq	r4, ip
 8001230:	d10a      	bne.n	8001248 <__aeabi_ddiv+0x19c>
 8001232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001236:	f47f af34 	bne.w	80010a2 <__aeabi_dmul+0x24a>
 800123a:	ea95 0f0c 	teq	r5, ip
 800123e:	f47f af25 	bne.w	800108c <__aeabi_dmul+0x234>
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	e72c      	b.n	80010a2 <__aeabi_dmul+0x24a>
 8001248:	ea95 0f0c 	teq	r5, ip
 800124c:	d106      	bne.n	800125c <__aeabi_ddiv+0x1b0>
 800124e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001252:	f43f aefd 	beq.w	8001050 <__aeabi_dmul+0x1f8>
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	e722      	b.n	80010a2 <__aeabi_dmul+0x24a>
 800125c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001260:	bf18      	it	ne
 8001262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001266:	f47f aec5 	bne.w	8000ff4 <__aeabi_dmul+0x19c>
 800126a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800126e:	f47f af0d 	bne.w	800108c <__aeabi_dmul+0x234>
 8001272:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001276:	f47f aeeb 	bne.w	8001050 <__aeabi_dmul+0x1f8>
 800127a:	e712      	b.n	80010a2 <__aeabi_dmul+0x24a>

0800127c <__aeabi_d2iz>:
 800127c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001280:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001284:	d215      	bcs.n	80012b2 <__aeabi_d2iz+0x36>
 8001286:	d511      	bpl.n	80012ac <__aeabi_d2iz+0x30>
 8001288:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800128c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001290:	d912      	bls.n	80012b8 <__aeabi_d2iz+0x3c>
 8001292:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800129a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800129e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80012a2:	fa23 f002 	lsr.w	r0, r3, r2
 80012a6:	bf18      	it	ne
 80012a8:	4240      	negne	r0, r0
 80012aa:	4770      	bx	lr
 80012ac:	f04f 0000 	mov.w	r0, #0
 80012b0:	4770      	bx	lr
 80012b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80012b6:	d105      	bne.n	80012c4 <__aeabi_d2iz+0x48>
 80012b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80012bc:	bf08      	it	eq
 80012be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80012c2:	4770      	bx	lr
 80012c4:	f04f 0000 	mov.w	r0, #0
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
  ldr  r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012f6:	f7ff fb3d 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f000 f811 	bl	8001320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff f95b 	bl	80005b8 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001304:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001308:	080013a4 	.word	0x080013a4
  ldr  r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001310:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001314:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001318:	2000004c 	.word	0x2000004c

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <__libc_init_array>:
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	4e0d      	ldr	r6, [pc, #52]	; (8001358 <__libc_init_array+0x38>)
 8001324:	4c0d      	ldr	r4, [pc, #52]	; (800135c <__libc_init_array+0x3c>)
 8001326:	1ba4      	subs	r4, r4, r6
 8001328:	10a4      	asrs	r4, r4, #2
 800132a:	2500      	movs	r5, #0
 800132c:	42a5      	cmp	r5, r4
 800132e:	d109      	bne.n	8001344 <__libc_init_array+0x24>
 8001330:	4e0b      	ldr	r6, [pc, #44]	; (8001360 <__libc_init_array+0x40>)
 8001332:	4c0c      	ldr	r4, [pc, #48]	; (8001364 <__libc_init_array+0x44>)
 8001334:	f000 f81a 	bl	800136c <_init>
 8001338:	1ba4      	subs	r4, r4, r6
 800133a:	10a4      	asrs	r4, r4, #2
 800133c:	2500      	movs	r5, #0
 800133e:	42a5      	cmp	r5, r4
 8001340:	d105      	bne.n	800134e <__libc_init_array+0x2e>
 8001342:	bd70      	pop	{r4, r5, r6, pc}
 8001344:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001348:	4798      	blx	r3
 800134a:	3501      	adds	r5, #1
 800134c:	e7ee      	b.n	800132c <__libc_init_array+0xc>
 800134e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001352:	4798      	blx	r3
 8001354:	3501      	adds	r5, #1
 8001356:	e7f2      	b.n	800133e <__libc_init_array+0x1e>
 8001358:	0800139c 	.word	0x0800139c
 800135c:	0800139c 	.word	0x0800139c
 8001360:	0800139c 	.word	0x0800139c
 8001364:	080013a0 	.word	0x080013a0

08001368 <__EH_FRAME_BEGIN__>:
 8001368:	00000000                                ....

0800136c <_init>:
 800136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136e:	bf00      	nop
 8001370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001372:	bc08      	pop	{r3}
 8001374:	469e      	mov	lr, r3
 8001376:	4770      	bx	lr

08001378 <_fini>:
 8001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137a:	bf00      	nop
 800137c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800137e:	bc08      	pop	{r3}
 8001380:	469e      	mov	lr, r3
 8001382:	4770      	bx	lr
